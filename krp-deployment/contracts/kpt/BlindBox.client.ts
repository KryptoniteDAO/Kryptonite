/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, BlindBoxLevelMsg, ReferralRewardConfigMsg, ReferralLevelConfig, ReferralLevelRewardBoxConfig, ExecuteMsg, Binary, Expiration, Timestamp, Uint64, ReferralLevelConfigMsg, ReferralLevelRewardBoxConfigMsg, QueryMsg, Uint128, AllNftInfoResponseForNullable_Empty, OwnerOfResponse, Approval, NftInfoResponseForNullable_Empty, Empty, OperatorsResponse, TokensResponse, ApprovalResponse, ApprovalsResponse, CalMintInfoResponse, CheckReferralCodeResponse, ContractInfoResponse, UserInfoResponse, MinterResponse, NumTokensResponse, OperatorResponse, ReferralRewardConfigResponse, ReferralLevelConfigResponse, ReferralLevelRewardBoxConfigResponse, BlindBoxConfigResponse, BlindBoxConfigLevelResponse, BlindBoxInfoResponse, ArrayOfBlindBoxInfoResponse, InviterReferralRecordResponse } from "./BlindBox.types";
export interface BlindBoxReadOnlyInterface {
  contractAddress: string;
  ownerOf: ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<OwnerOfResponse>;
  approval: ({
    includeExpired,
    spender,
    tokenId
  }: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  }) => Promise<ApprovalResponse>;
  approvals: ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<ApprovalsResponse>;
  operator: ({
    includeExpired,
    operator,
    owner
  }: {
    includeExpired?: boolean;
    operator: string;
    owner: string;
  }) => Promise<OperatorResponse>;
  allOperators: ({
    includeExpired,
    limit,
    owner,
    startAfter
  }: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  }) => Promise<OperatorsResponse>;
  numTokens: () => Promise<NumTokensResponse>;
  contractInfo: () => Promise<ContractInfoResponse>;
  nftInfo: ({
    tokenId
  }: {
    tokenId: string;
  }) => Promise<NftInfoResponseForNullable_Empty>;
  allNftInfo: ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<AllNftInfoResponseForNullable_Empty>;
  tokens: ({
    limit,
    owner,
    startAfter
  }: {
    limit?: number;
    owner: string;
    startAfter?: string;
  }) => Promise<TokensResponse>;
  allTokens: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<TokensResponse>;
  minter: () => Promise<MinterResponse>;
  queryBlindBoxConfig: () => Promise<BlindBoxConfigResponse>;
  queryBlindBoxConfigLevel: ({
    index
  }: {
    index: number;
  }) => Promise<BlindBoxConfigLevelResponse>;
  queryBlindBoxInfo: ({
    tokenId
  }: {
    tokenId: string;
  }) => Promise<BlindBoxInfoResponse>;
  queryBlindBoxInfos: ({
    tokenIds
  }: {
    tokenIds: string[];
  }) => Promise<ArrayOfBlindBoxInfoResponse>;
  queryAllReferralRewardConfig: () => Promise<ReferralRewardConfigResponse>;
  queryInviterRecords: ({
    inviter,
    limit,
    startAfter
  }: {
    inviter: Addr;
    limit?: number;
    startAfter?: Addr;
  }) => Promise<InviterReferralRecordResponse>;
  calMintInfo: ({
    levelIndex,
    mintNum,
    referralCode
  }: {
    levelIndex: number;
    mintNum: Uint128;
    referralCode?: string;
  }) => Promise<CalMintInfoResponse>;
  checkReferralCode: ({
    referralCode
  }: {
    referralCode: string;
  }) => Promise<CheckReferralCodeResponse>;
  getUserInfo: ({
    user
  }: {
    user: Addr;
  }) => Promise<UserInfoResponse>;
}
export class BlindBoxQueryClient implements BlindBoxReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownerOf = this.ownerOf.bind(this);
    this.approval = this.approval.bind(this);
    this.approvals = this.approvals.bind(this);
    this.operator = this.operator.bind(this);
    this.allOperators = this.allOperators.bind(this);
    this.numTokens = this.numTokens.bind(this);
    this.contractInfo = this.contractInfo.bind(this);
    this.nftInfo = this.nftInfo.bind(this);
    this.allNftInfo = this.allNftInfo.bind(this);
    this.tokens = this.tokens.bind(this);
    this.allTokens = this.allTokens.bind(this);
    this.minter = this.minter.bind(this);
    this.queryBlindBoxConfig = this.queryBlindBoxConfig.bind(this);
    this.queryBlindBoxConfigLevel = this.queryBlindBoxConfigLevel.bind(this);
    this.queryBlindBoxInfo = this.queryBlindBoxInfo.bind(this);
    this.queryBlindBoxInfos = this.queryBlindBoxInfos.bind(this);
    this.queryAllReferralRewardConfig = this.queryAllReferralRewardConfig.bind(this);
    this.queryInviterRecords = this.queryInviterRecords.bind(this);
    this.calMintInfo = this.calMintInfo.bind(this);
    this.checkReferralCode = this.checkReferralCode.bind(this);
    this.getUserInfo = this.getUserInfo.bind(this);
  }

  ownerOf = async ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<OwnerOfResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner_of: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  approval = async ({
    includeExpired,
    spender,
    tokenId
  }: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  }): Promise<ApprovalResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approval: {
        include_expired: includeExpired,
        spender,
        token_id: tokenId
      }
    });
  };
  approvals = async ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<ApprovalsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approvals: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  operator = async ({
    includeExpired,
    operator,
    owner
  }: {
    includeExpired?: boolean;
    operator: string;
    owner: string;
  }): Promise<OperatorResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      operator: {
        include_expired: includeExpired,
        operator,
        owner
      }
    });
  };
  allOperators = async ({
    includeExpired,
    limit,
    owner,
    startAfter
  }: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  }): Promise<OperatorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_operators: {
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  numTokens = async (): Promise<NumTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      num_tokens: {}
    });
  };
  contractInfo = async (): Promise<ContractInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_info: {}
    });
  };
  nftInfo = async ({
    tokenId
  }: {
    tokenId: string;
  }): Promise<NftInfoResponseForNullable_Empty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft_info: {
        token_id: tokenId
      }
    });
  };
  allNftInfo = async ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<AllNftInfoResponseForNullable_Empty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_nft_info: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  tokens = async ({
    limit,
    owner,
    startAfter
  }: {
    limit?: number;
    owner: string;
    startAfter?: string;
  }): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tokens: {
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  allTokens = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_tokens: {
        limit,
        start_after: startAfter
      }
    });
  };
  minter = async (): Promise<MinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minter: {}
    });
  };
  queryBlindBoxConfig = async (): Promise<BlindBoxConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_blind_box_config: {}
    });
  };
  queryBlindBoxConfigLevel = async ({
    index
  }: {
    index: number;
  }): Promise<BlindBoxConfigLevelResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_blind_box_config_level: {
        index
      }
    });
  };
  queryBlindBoxInfo = async ({
    tokenId
  }: {
    tokenId: string;
  }): Promise<BlindBoxInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_blind_box_info: {
        token_id: tokenId
      }
    });
  };
  queryBlindBoxInfos = async ({
    tokenIds
  }: {
    tokenIds: string[];
  }): Promise<ArrayOfBlindBoxInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_blind_box_infos: {
        token_ids: tokenIds
      }
    });
  };
  queryAllReferralRewardConfig = async (): Promise<ReferralRewardConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_all_referral_reward_config: {}
    });
  };
  queryInviterRecords = async ({
    inviter,
    limit,
    startAfter
  }: {
    inviter: Addr;
    limit?: number;
    startAfter?: Addr;
  }): Promise<InviterReferralRecordResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_inviter_records: {
        inviter,
        limit,
        start_after: startAfter
      }
    });
  };
  calMintInfo = async ({
    levelIndex,
    mintNum,
    referralCode
  }: {
    levelIndex: number;
    mintNum: Uint128;
    referralCode?: string;
  }): Promise<CalMintInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cal_mint_info: {
        level_index: levelIndex,
        mint_num: mintNum,
        referral_code: referralCode
      }
    });
  };
  checkReferralCode = async ({
    referralCode
  }: {
    referralCode: string;
  }): Promise<CheckReferralCodeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_referral_code: {
        referral_code: referralCode
      }
    });
  };
  getUserInfo = async ({
    user
  }: {
    user: Addr;
  }): Promise<UserInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_info: {
        user
      }
    });
  };
}
export interface BlindBoxInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    canTransferTime,
    endMintTime,
    gov,
    inviterRewardBoxContract,
    nftBaseUrl,
    nftUriSuffix,
    priceToken,
    receiverPriceAddr,
    startMintTime
  }: {
    canTransferTime?: number;
    endMintTime?: number;
    gov?: string;
    inviterRewardBoxContract?: Addr;
    nftBaseUrl?: string;
    nftUriSuffix?: string;
    priceToken?: string;
    receiverPriceAddr?: Addr;
    startMintTime?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfigLevel: ({
    index,
    mintTotalCount,
    price
  }: {
    index: number;
    mintTotalCount?: number;
    price?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateReferralLevelConfig: ({
    referralLevelConfigMsg
  }: {
    referralLevelConfigMsg: ReferralLevelConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateReferralLevelBoxConfig: ({
    levelRewardBoxConfigMsg
  }: {
    levelRewardBoxConfigMsg: ReferralLevelRewardBoxConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createReferralInfo: ({
    referralCode
  }: {
    referralCode: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  doInviterRewardMint: ({
    inviter,
    levelIndex,
    mintNum
  }: {
    inviter: Addr;
    levelIndex: number;
    mintNum: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mint: ({
    levelIndex,
    mintNum,
    recipient,
    referralCode
  }: {
    levelIndex: number;
    mintNum: number;
    recipient?: string;
    referralCode?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transferNft: ({
    recipient,
    tokenId
  }: {
    recipient: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  sendNft: ({
    contract,
    msg,
    tokenId
  }: {
    contract: string;
    msg: Binary;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  approve: ({
    expires,
    spender,
    tokenId
  }: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  revoke: ({
    spender,
    tokenId
  }: {
    spender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  approveAll: ({
    expires,
    operator
  }: {
    expires?: Expiration;
    operator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  revokeAll: ({
    operator
  }: {
    operator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    tokenId
  }: {
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BlindBoxClient implements BlindBoxInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.updateConfigLevel = this.updateConfigLevel.bind(this);
    this.updateReferralLevelConfig = this.updateReferralLevelConfig.bind(this);
    this.updateReferralLevelBoxConfig = this.updateReferralLevelBoxConfig.bind(this);
    this.createReferralInfo = this.createReferralInfo.bind(this);
    this.doInviterRewardMint = this.doInviterRewardMint.bind(this);
    this.mint = this.mint.bind(this);
    this.transferNft = this.transferNft.bind(this);
    this.sendNft = this.sendNft.bind(this);
    this.approve = this.approve.bind(this);
    this.revoke = this.revoke.bind(this);
    this.approveAll = this.approveAll.bind(this);
    this.revokeAll = this.revokeAll.bind(this);
    this.burn = this.burn.bind(this);
  }

  updateConfig = async ({
    canTransferTime,
    endMintTime,
    gov,
    inviterRewardBoxContract,
    nftBaseUrl,
    nftUriSuffix,
    priceToken,
    receiverPriceAddr,
    startMintTime
  }: {
    canTransferTime?: number;
    endMintTime?: number;
    gov?: string;
    inviterRewardBoxContract?: Addr;
    nftBaseUrl?: string;
    nftUriSuffix?: string;
    priceToken?: string;
    receiverPriceAddr?: Addr;
    startMintTime?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        can_transfer_time: canTransferTime,
        end_mint_time: endMintTime,
        gov,
        inviter_reward_box_contract: inviterRewardBoxContract,
        nft_base_url: nftBaseUrl,
        nft_uri_suffix: nftUriSuffix,
        price_token: priceToken,
        receiver_price_addr: receiverPriceAddr,
        start_mint_time: startMintTime
      }
    }, fee, memo, _funds);
  };
  updateConfigLevel = async ({
    index,
    mintTotalCount,
    price
  }: {
    index: number;
    mintTotalCount?: number;
    price?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config_level: {
        index,
        mint_total_count: mintTotalCount,
        price
      }
    }, fee, memo, _funds);
  };
  updateReferralLevelConfig = async ({
    referralLevelConfigMsg
  }: {
    referralLevelConfigMsg: ReferralLevelConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_referral_level_config: {
        referral_level_config_msg: referralLevelConfigMsg
      }
    }, fee, memo, _funds);
  };
  updateReferralLevelBoxConfig = async ({
    levelRewardBoxConfigMsg
  }: {
    levelRewardBoxConfigMsg: ReferralLevelRewardBoxConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_referral_level_box_config: {
        level_reward_box_config_msg: levelRewardBoxConfigMsg
      }
    }, fee, memo, _funds);
  };
  createReferralInfo = async ({
    referralCode
  }: {
    referralCode: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_referral_info: {
        referral_code: referralCode
      }
    }, fee, memo, _funds);
  };
  doInviterRewardMint = async ({
    inviter,
    levelIndex,
    mintNum
  }: {
    inviter: Addr;
    levelIndex: number;
    mintNum: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      do_inviter_reward_mint: {
        inviter,
        level_index: levelIndex,
        mint_num: mintNum
      }
    }, fee, memo, _funds);
  };
  mint = async ({
    levelIndex,
    mintNum,
    recipient,
    referralCode
  }: {
    levelIndex: number;
    mintNum: number;
    recipient?: string;
    referralCode?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        level_index: levelIndex,
        mint_num: mintNum,
        recipient,
        referral_code: referralCode
      }
    }, fee, memo, _funds);
  };
  transferNft = async ({
    recipient,
    tokenId
  }: {
    recipient: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_nft: {
        recipient,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  sendNft = async ({
    contract,
    msg,
    tokenId
  }: {
    contract: string;
    msg: Binary;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_nft: {
        contract,
        msg,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  approve = async ({
    expires,
    spender,
    tokenId
  }: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve: {
        expires,
        spender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  revoke = async ({
    spender,
    tokenId
  }: {
    spender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke: {
        spender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  approveAll = async ({
    expires,
    operator
  }: {
    expires?: Expiration;
    operator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve_all: {
        expires,
        operator
      }
    }, fee, memo, _funds);
  };
  revokeAll = async ({
    operator
  }: {
    operator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke_all: {
        operator
      }
    }, fee, memo, _funds);
  };
  burn = async ({
    tokenId
  }: {
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
}
