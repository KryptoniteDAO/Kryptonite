/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, InstantiateMsg, VeKptLockSetting, ExecuteMsg, QueryMsg, GetBoostConfigResponse, GetUnlockTimeResponse, GetUserBoostResponse, LockStatusResponse } from "./VeKptBoost.types";
export interface VeKptBoostReadOnlyInterface {
  contractAddress: string;
  getUnlockTime: ({
    user
  }: {
    user: Addr;
  }) => Promise<GetUnlockTimeResponse>;
  getUserLockStatus: ({
    user
  }: {
    user: Addr;
  }) => Promise<LockStatusResponse>;
  getUserBoost: ({
    finishAt,
    user,
    userUpdatedAt
  }: {
    finishAt: Uint128;
    user: Addr;
    userUpdatedAt: Uint128;
  }) => Promise<GetUserBoostResponse>;
  getBoostConfig: () => Promise<GetBoostConfigResponse>;
}
export class VeKptBoostQueryClient implements VeKptBoostReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getUnlockTime = this.getUnlockTime.bind(this);
    this.getUserLockStatus = this.getUserLockStatus.bind(this);
    this.getUserBoost = this.getUserBoost.bind(this);
    this.getBoostConfig = this.getBoostConfig.bind(this);
  }

  getUnlockTime = async ({
    user
  }: {
    user: Addr;
  }): Promise<GetUnlockTimeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_unlock_time: {
        user
      }
    });
  };
  getUserLockStatus = async ({
    user
  }: {
    user: Addr;
  }): Promise<LockStatusResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_lock_status: {
        user
      }
    });
  };
  getUserBoost = async ({
    finishAt,
    user,
    userUpdatedAt
  }: {
    finishAt: Uint128;
    user: Addr;
    userUpdatedAt: Uint128;
  }): Promise<GetUserBoostResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_boost: {
        finish_at: finishAt,
        user,
        user_updated_at: userUpdatedAt
      }
    });
  };
  getBoostConfig = async (): Promise<GetBoostConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_boost_config: {}
    });
  };
}
export interface VeKptBoostInterface {
  contractAddress: string;
  sender: string;
  addLockSetting: ({
    duration,
    miningBoost
  }: {
    duration: Uint128;
    miningBoost: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  modifyLockSetting: ({
    duration,
    index,
    miningBoost
  }: {
    duration: Uint128;
    index: number;
    miningBoost: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeGov: ({
    gov
  }: {
    gov: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setLockStatus: ({
    index
  }: {
    index: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class VeKptBoostClient implements VeKptBoostInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addLockSetting = this.addLockSetting.bind(this);
    this.modifyLockSetting = this.modifyLockSetting.bind(this);
    this.changeGov = this.changeGov.bind(this);
    this.setLockStatus = this.setLockStatus.bind(this);
  }

  addLockSetting = async ({
    duration,
    miningBoost
  }: {
    duration: Uint128;
    miningBoost: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_lock_setting: {
        duration,
        mining_boost: miningBoost
      }
    }, fee, memo, _funds);
  };
  modifyLockSetting = async ({
    duration,
    index,
    miningBoost
  }: {
    duration: Uint128;
    index: number;
    miningBoost: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      modify_lock_setting: {
        duration,
        index,
        mining_boost: miningBoost
      }
    }, fee, memo, _funds);
  };
  changeGov = async ({
    gov
  }: {
    gov: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_gov: {
        gov
      }
    }, fee, memo, _funds);
  };
  setLockStatus = async ({
    index
  }: {
    index: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_lock_status: {
        index
      }
    }, fee, memo, _funds);
  };
}