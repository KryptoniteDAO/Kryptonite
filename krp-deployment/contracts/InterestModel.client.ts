/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal256, BorrowRateResponse, ConfigResponse, ExecuteMsg, InstantiateMsg, QueryMsg, Uint256 } from "./InterestModel.types";
export interface InterestModelReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  borrowRate: ({
    marketBalance,
    totalLiabilities,
    totalReserves
  }: {
    marketBalance: Uint256;
    totalLiabilities: Decimal256;
    totalReserves: Decimal256;
  }) => Promise<BorrowRateResponse>;
}
export class InterestModelQueryClient implements InterestModelReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.borrowRate = this.borrowRate.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  borrowRate = async ({
    marketBalance,
    totalLiabilities,
    totalReserves
  }: {
    marketBalance: Uint256;
    totalLiabilities: Decimal256;
    totalReserves: Decimal256;
  }): Promise<BorrowRateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      borrow_rate: {
        market_balance: marketBalance,
        total_liabilities: totalLiabilities,
        total_reserves: totalReserves
      }
    });
  };
}
export interface InterestModelInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    baseRate,
    interestMultiplier,
    owner
  }: {
    baseRate?: Decimal256;
    interestMultiplier?: Decimal256;
    owner?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class InterestModelClient implements InterestModelInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
  }

  updateConfig = async ({
    baseRate,
    interestMultiplier,
    owner
  }: {
    baseRate?: Decimal256;
    interestMultiplier?: Decimal256;
    owner?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        base_rate: baseRate,
        interest_multiplier: interestMultiplier,
        owner
      }
    }, fee, memo, _funds);
  };
}