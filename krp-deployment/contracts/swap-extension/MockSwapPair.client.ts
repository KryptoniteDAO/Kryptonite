/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AssetInfo, Addr, Uint128, InstantiateMsg, ExecuteMsg, Decimal, Asset, QueryMsg, SimulationResponse } from "./MockSwapPair.types";
export interface MockSwapPairReadOnlyInterface {
  contractAddress: string;
  simulation: ({
    offerAsset
  }: {
    offerAsset: Asset;
  }) => Promise<SimulationResponse>;
}
export class MockSwapPairQueryClient implements MockSwapPairReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.simulation = this.simulation.bind(this);
  }

  simulation = async ({
    offerAsset
  }: {
    offerAsset: Asset;
  }): Promise<SimulationResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulation: {
        offer_asset: offerAsset
      }
    });
  };
}
export interface MockSwapPairInterface {
  contractAddress: string;
  sender: string;
  swap: ({
    beliefPrice,
    maxSpread,
    offerAsset,
    to
  }: {
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    to?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  update0To1Price: ({
    newPrice
  }: {
    newPrice: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MockSwapPairClient implements MockSwapPairInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.swap = this.swap.bind(this);
    this.update0To1Price = this.update0To1Price.bind(this);
  }

  swap = async ({
    beliefPrice,
    maxSpread,
    offerAsset,
    to
  }: {
    beliefPrice?: Decimal;
    maxSpread?: Decimal;
    offerAsset: Asset;
    to?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap: {
        belief_price: beliefPrice,
        max_spread: maxSpread,
        offer_asset: offerAsset,
        to
      }
    }, fee, memo, _funds);
  };
  update0To1Price = async ({
    newPrice
  }: {
    newPrice: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update0_to1_price: {
        new_price: newPrice
      }
    }, fee, memo, _funds);
  };
}