/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ConfigResponse, ExecuteMsg, Decimal256, InstantiateMsg, PriceResponse, PricesResponse, PricesResponseElem, QueryMsg } from "./Oracle.types";
export interface OracleReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  feeder: ({
    asset
  }: {
    asset: string;
  }) => Promise<FeederResponse>;
  price: ({
    base,
    quote
  }: {
    base: string;
    quote: string;
  }) => Promise<PriceResponse>;
  prices: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<PricesResponse>;
}
export class OracleQueryClient implements OracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.feeder = this.feeder.bind(this);
    this.price = this.price.bind(this);
    this.prices = this.prices.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  feeder = async ({
    asset
  }: {
    asset: string;
  }): Promise<FeederResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      feeder: {
        asset
      }
    });
  };
  price = async ({
    base,
    quote
  }: {
    base: string;
    quote: string;
  }): Promise<PriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      price: {
        base,
        quote
      }
    });
  };
  prices = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<PricesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      prices: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface OracleInterface extends OracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    owner
  }: {
    owner?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerFeeder: ({
    asset,
    feeder
  }: {
    asset: string;
    feeder: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  feedPrice: ({
    prices
  }: {
    prices: string[][];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OracleClient extends OracleQueryClient implements OracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.registerFeeder = this.registerFeeder.bind(this);
    this.feedPrice = this.feedPrice.bind(this);
  }

  updateConfig = async ({
    owner
  }: {
    owner?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        owner
      }
    }, fee, memo, _funds);
  };
  registerFeeder = async ({
    asset,
    feeder
  }: {
    asset: string;
    feeder: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_feeder: {
        asset,
        feeder
      }
    }, fee, memo, _funds);
  };
  feedPrice = async ({
    prices
  }: {
    prices: string[][];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      feed_price: {
        prices
      }
    }, fee, memo, _funds);
  };
}