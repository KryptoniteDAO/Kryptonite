/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  AddressPrecompile,
  AddressPrecompileInterface,
} from "../../precompile/AddressPrecompile";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "addr",
        type: "string",
      },
    ],
    name: "getEvmAddr",
    outputs: [
      {
        internalType: "address",
        name: "response",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getSeiAddr",
    outputs: [
      {
        internalType: "string",
        name: "response",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class AddressPrecompile__factory {
  static readonly abi = _abi;
  static createInterface(): AddressPrecompileInterface {
    return new Interface(_abi) as AddressPrecompileInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AddressPrecompile {
    return new Contract(address, _abi, runner) as unknown as AddressPrecompile;
  }
}
