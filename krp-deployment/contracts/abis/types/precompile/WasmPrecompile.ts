/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface WasmPrecompileInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "execute"
      | "execute(string,bytes,bytes)"
      | "instantiate"
      | "instantiate(uint64,string,bytes,string,bytes)"
      | "query"
      | "query(string,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execute(string,bytes,bytes)",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate",
    values: [BigNumberish, string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instantiate(uint64,string,bytes,string,bytes)",
    values: [BigNumberish, string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "query",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "query(string,bytes)",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "execute(string,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantiate(uint64,string,bytes,string,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "query", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "query(string,bytes)",
    data: BytesLike
  ): Result;
}

export interface WasmPrecompile extends BaseContract {
  connect(runner?: ContractRunner | null): WasmPrecompile;
  waitForDeployment(): Promise<this>;

  interface: WasmPrecompileInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<
    [contractAddress: string, msg: BytesLike, coins: BytesLike],
    [string],
    "payable"
  >;

  "execute(string,bytes,bytes)": TypedContractMethod<
    [contractAddress: string, msg: BytesLike, coins: BytesLike],
    [string],
    "payable"
  >;

  instantiate: TypedContractMethod<
    [
      codeID: BigNumberish,
      admin: string,
      msg: BytesLike,
      label: string,
      coins: BytesLike
    ],
    [[string, string] & { contractAddr: string; data: string }],
    "payable"
  >;

  "instantiate(uint64,string,bytes,string,bytes)": TypedContractMethod<
    [
      codeID: BigNumberish,
      admin: string,
      msg: BytesLike,
      label: string,
      coins: BytesLike
    ],
    [[string, string] & { contractAddr: string; data: string }],
    "payable"
  >;

  query: TypedContractMethod<
    [contractAddress: string, req: BytesLike],
    [string],
    "view"
  >;

  "query(string,bytes)": TypedContractMethod<
    [contractAddress: string, req: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [contractAddress: string, msg: BytesLike, coins: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "execute(string,bytes,bytes)"
  ): TypedContractMethod<
    [contractAddress: string, msg: BytesLike, coins: BytesLike],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "instantiate"
  ): TypedContractMethod<
    [
      codeID: BigNumberish,
      admin: string,
      msg: BytesLike,
      label: string,
      coins: BytesLike
    ],
    [[string, string] & { contractAddr: string; data: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "instantiate(uint64,string,bytes,string,bytes)"
  ): TypedContractMethod<
    [
      codeID: BigNumberish,
      admin: string,
      msg: BytesLike,
      label: string,
      coins: BytesLike
    ],
    [[string, string] & { contractAddr: string; data: string }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "query"
  ): TypedContractMethod<
    [contractAddress: string, req: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "query(string,bytes)"
  ): TypedContractMethod<
    [contractAddress: string, req: BytesLike],
    [string],
    "view"
  >;

  filters: {};
}
