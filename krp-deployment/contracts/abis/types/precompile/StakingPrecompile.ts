/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StakingPrecompileInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegate"
      | "delegate(string)"
      | "redelegate"
      | "redelegate(string,string,uint256)"
      | "undelegate"
      | "undelegate(string,uint256)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegate(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redelegate(string,string,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate(string,uint256)",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegate(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redelegate(string,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "undelegate(string,uint256)",
    data: BytesLike
  ): Result;
}

export interface StakingPrecompile extends BaseContract {
  connect(runner?: ContractRunner | null): StakingPrecompile;
  waitForDeployment(): Promise<this>;

  interface: StakingPrecompileInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegate: TypedContractMethod<[valAddress: string], [boolean], "payable">;

  "delegate(string)": TypedContractMethod<
    [valAddress: string],
    [boolean],
    "payable"
  >;

  redelegate: TypedContractMethod<
    [srcAddress: string, dstAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "redelegate(string,string,uint256)": TypedContractMethod<
    [srcAddress: string, dstAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  undelegate: TypedContractMethod<
    [valAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "undelegate(string,uint256)": TypedContractMethod<
    [valAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[valAddress: string], [boolean], "payable">;
  getFunction(
    nameOrSignature: "delegate(string)"
  ): TypedContractMethod<[valAddress: string], [boolean], "payable">;
  getFunction(
    nameOrSignature: "redelegate"
  ): TypedContractMethod<
    [srcAddress: string, dstAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redelegate(string,string,uint256)"
  ): TypedContractMethod<
    [srcAddress: string, dstAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegate"
  ): TypedContractMethod<
    [valAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegate(string,uint256)"
  ): TypedContractMethod<
    [valAddress: string, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
