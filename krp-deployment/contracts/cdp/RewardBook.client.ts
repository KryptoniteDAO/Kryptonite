/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint256, InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, AccruedRewardsResponse, ConfigResponse, Decimal, HolderResponse, HoldersResponse, StateResponse } from "./RewardBook.types";
export interface RewardBookReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  state: () => Promise<StateResponse>;
  accruedRewards: ({
    address
  }: {
    address: string;
  }) => Promise<AccruedRewardsResponse>;
  holder: ({
    address
  }: {
    address: string;
  }) => Promise<HolderResponse>;
  holders: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<HoldersResponse>;
}
export class RewardBookQueryClient implements RewardBookReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
    this.accruedRewards = this.accruedRewards.bind(this);
    this.holder = this.holder.bind(this);
    this.holders = this.holders.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
  accruedRewards = async ({
    address
  }: {
    address: string;
  }): Promise<AccruedRewardsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      accrued_rewards: {
        address
      }
    });
  };
  holder = async ({
    address
  }: {
    address: string;
  }): Promise<HolderResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holder: {
        address
      }
    });
  };
  holders = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<HoldersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holders: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface RewardBookInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    controlContract,
    custodyContract,
    ownerAddr,
    rewardContract,
    rewardDenom,
    threshold
  }: {
    controlContract?: string;
    custodyContract?: string;
    ownerAddr?: string;
    rewardContract?: string;
    rewardDenom?: string;
    threshold?: Uint256;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  increaseBalance: ({
    address,
    amount
  }: {
    address: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  decreaseBalance: ({
    address,
    amount
  }: {
    address: string;
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateGlobalIndex: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  executeUpdateGlobalIndex: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewards: ({
    recipient
  }: {
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RewardBookClient implements RewardBookInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.increaseBalance = this.increaseBalance.bind(this);
    this.decreaseBalance = this.decreaseBalance.bind(this);
    this.updateGlobalIndex = this.updateGlobalIndex.bind(this);
    this.executeUpdateGlobalIndex = this.executeUpdateGlobalIndex.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
  }

  updateConfig = async ({
    controlContract,
    custodyContract,
    ownerAddr,
    rewardContract,
    rewardDenom,
    threshold
  }: {
    controlContract?: string;
    custodyContract?: string;
    ownerAddr?: string;
    rewardContract?: string;
    rewardDenom?: string;
    threshold?: Uint256;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        control_contract: controlContract,
        custody_contract: custodyContract,
        owner_addr: ownerAddr,
        reward_contract: rewardContract,
        reward_denom: rewardDenom,
        threshold
      }
    }, fee, memo, _funds);
  };
  increaseBalance = async ({
    address,
    amount
  }: {
    address: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increase_balance: {
        address,
        amount
      }
    }, fee, memo, _funds);
  };
  decreaseBalance = async ({
    address,
    amount
  }: {
    address: string;
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      decrease_balance: {
        address,
        amount
      }
    }, fee, memo, _funds);
  };
  updateGlobalIndex = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_global_index: {}
    }, fee, memo, _funds);
  };
  executeUpdateGlobalIndex = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_update_global_index: {}
    }, fee, memo, _funds);
  };
  claimRewards = async ({
    recipient
  }: {
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards: {
        recipient
      }
    }, fee, memo, _funds);
  };
}