/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint256, InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, ConfigResponse, StateResponse } from "./StablePool.types";
export interface StablePoolReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  state: () => Promise<StateResponse>;
}
export class StablePoolQueryClient implements StablePoolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
}
export interface StablePoolInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    controlContract,
    minRedeemValue,
    ownerAddr
  }: {
    controlContract?: string;
    minRedeemValue?: Uint256;
    ownerAddr?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintStableCoin: ({
    minter,
    stableAmount
  }: {
    minter: string;
    stableAmount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  repayStableCoin: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  redeemStableCoin: ({
    minter
  }: {
    minter: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  repayStableFromLiquidation: ({
    minter,
    preBalance
  }: {
    minter: string;
    preBalance: Uint256;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class StablePoolClient implements StablePoolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.mintStableCoin = this.mintStableCoin.bind(this);
    this.repayStableCoin = this.repayStableCoin.bind(this);
    this.redeemStableCoin = this.redeemStableCoin.bind(this);
    this.repayStableFromLiquidation = this.repayStableFromLiquidation.bind(this);
  }

  updateConfig = async ({
    controlContract,
    minRedeemValue,
    ownerAddr
  }: {
    controlContract?: string;
    minRedeemValue?: Uint256;
    ownerAddr?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        control_contract: controlContract,
        min_redeem_value: minRedeemValue,
        owner_addr: ownerAddr
      }
    }, fee, memo, _funds);
  };
  mintStableCoin = async ({
    minter,
    stableAmount
  }: {
    minter: string;
    stableAmount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_stable_coin: {
        minter,
        stable_amount: stableAmount
      }
    }, fee, memo, _funds);
  };
  repayStableCoin = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      repay_stable_coin: {}
    }, fee, memo, _funds);
  };
  redeemStableCoin = async ({
    minter
  }: {
    minter: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      redeem_stable_coin: {
        minter
      }
    }, fee, memo, _funds);
  };
  repayStableFromLiquidation = async ({
    minter,
    preBalance
  }: {
    minter: string;
    preBalance: Uint256;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      repay_stable_from_liquidation: {
        minter,
        pre_balance: preBalance
      }
    }, fee, memo, _funds);
  };
}