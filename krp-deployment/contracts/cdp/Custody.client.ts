/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Cw20ReceiveMsg, QueryMsg, ConfigResponse, Uint256, StateResponse } from "./Custody.types";
export interface CustodyReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  state: () => Promise<StateResponse>;
}
export class CustodyQueryClient implements CustodyReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
}
export interface CustodyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    collateralContract,
    controlContract,
    liquidationContract,
    ownerAddr,
    poolContract
  }: {
    collateralContract?: string;
    controlContract?: string;
    liquidationContract?: string;
    ownerAddr?: string;
    poolContract?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  redeemStableCoin: ({
    redeemAmount,
    redeemer
  }: {
    redeemAmount: Uint128;
    redeemer: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawCollateral: ({
    collateralAmount,
    collateralContract,
    minter
  }: {
    collateralAmount: Uint128;
    collateralContract: string;
    minter: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  liquidateCollateral: ({
    amount,
    liquidator
  }: {
    amount: Uint128;
    liquidator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CustodyClient implements CustodyInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.receive = this.receive.bind(this);
    this.redeemStableCoin = this.redeemStableCoin.bind(this);
    this.withdrawCollateral = this.withdrawCollateral.bind(this);
    this.liquidateCollateral = this.liquidateCollateral.bind(this);
  }

  updateConfig = async ({
    collateralContract,
    controlContract,
    liquidationContract,
    ownerAddr,
    poolContract
  }: {
    collateralContract?: string;
    controlContract?: string;
    liquidationContract?: string;
    ownerAddr?: string;
    poolContract?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        collateral_contract: collateralContract,
        control_contract: controlContract,
        liquidation_contract: liquidationContract,
        owner_addr: ownerAddr,
        pool_contract: poolContract
      }
    }, fee, memo, _funds);
  };
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  redeemStableCoin = async ({
    redeemAmount,
    redeemer
  }: {
    redeemAmount: Uint128;
    redeemer: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      redeem_stable_coin: {
        redeem_amount: redeemAmount,
        redeemer
      }
    }, fee, memo, _funds);
  };
  withdrawCollateral = async ({
    collateralAmount,
    collateralContract,
    minter
  }: {
    collateralAmount: Uint128;
    collateralContract: string;
    minter: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_collateral: {
        collateral_amount: collateralAmount,
        collateral_contract: collateralContract,
        minter
      }
    }, fee, memo, _funds);
  };
  liquidateCollateral = async ({
    amount,
    liquidator
  }: {
    amount: Uint128;
    liquidator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      liquidate_collateral: {
        amount,
        liquidator
      }
    }, fee, memo, _funds);
  };
}