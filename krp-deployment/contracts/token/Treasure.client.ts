/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Addr, InstantiateMsg, ExecuteMsg, Binary, Cw20ReceiveMsg, TreasureConfigMsg, QueryMsg, ConfigInfosResponse, TreasureConfig, TreasureState, UserInfosResponse, TreasureUserState } from "./Treasure.types";
export interface TreasureReadOnlyInterface {
  contractAddress: string;
  queryConfigInfos: () => Promise<ConfigInfosResponse>;
  queryUserInfos: ({
    user
  }: {
    user: Addr;
  }) => Promise<UserInfosResponse>;
}
export class TreasureQueryClient implements TreasureReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfigInfos = this.queryConfigInfos.bind(this);
    this.queryUserInfos = this.queryUserInfos.bind(this);
  }

  queryConfigInfos = async (): Promise<ConfigInfosResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config_infos: {}
    });
  };
  queryUserInfos = async ({
    user
  }: {
    user: Addr;
  }): Promise<UserInfosResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_user_infos: {
        user
      }
    });
  };
}
export interface TreasureInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    dustRewardPerSecond,
    endLockTime,
    gov,
    lockToken,
    mintNftCostDust,
    modNum,
    nftEndPreMintTime,
    nftStartPreMintTime,
    noDelayPunishCoefficient,
    punishReceiver,
    startLockTime,
    winningNum,
    withdrawDelayDuration
  }: {
    dustRewardPerSecond?: Uint128;
    endLockTime?: number;
    gov?: Addr;
    lockToken?: Addr;
    mintNftCostDust?: Uint128;
    modNum?: number;
    nftEndPreMintTime?: number;
    nftStartPreMintTime?: number;
    noDelayPunishCoefficient?: Uint128;
    punishReceiver?: Addr;
    startLockTime?: number;
    winningNum?: number[];
    withdrawDelayDuration?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  userWithdraw: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  userUnlock: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  preMintNft: ({
    mintNum
  }: {
    mintNum: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TreasureClient implements TreasureInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.userWithdraw = this.userWithdraw.bind(this);
    this.userUnlock = this.userUnlock.bind(this);
    this.preMintNft = this.preMintNft.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    dustRewardPerSecond,
    endLockTime,
    gov,
    lockToken,
    mintNftCostDust,
    modNum,
    nftEndPreMintTime,
    nftStartPreMintTime,
    noDelayPunishCoefficient,
    punishReceiver,
    startLockTime,
    winningNum,
    withdrawDelayDuration
  }: {
    dustRewardPerSecond?: Uint128;
    endLockTime?: number;
    gov?: Addr;
    lockToken?: Addr;
    mintNftCostDust?: Uint128;
    modNum?: number;
    nftEndPreMintTime?: number;
    nftStartPreMintTime?: number;
    noDelayPunishCoefficient?: Uint128;
    punishReceiver?: Addr;
    startLockTime?: number;
    winningNum?: number[];
    withdrawDelayDuration?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        dust_reward_per_second: dustRewardPerSecond,
        end_lock_time: endLockTime,
        gov,
        lock_token: lockToken,
        mint_nft_cost_dust: mintNftCostDust,
        mod_num: modNum,
        nft_end_pre_mint_time: nftEndPreMintTime,
        nft_start_pre_mint_time: nftStartPreMintTime,
        no_delay_punish_coefficient: noDelayPunishCoefficient,
        punish_receiver: punishReceiver,
        start_lock_time: startLockTime,
        winning_num: winningNum,
        withdraw_delay_duration: withdrawDelayDuration
      }
    }, fee, memo, _funds);
  };
  userWithdraw = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      user_withdraw: {
        amount
      }
    }, fee, memo, _funds);
  };
  userUnlock = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      user_unlock: {
        amount
      }
    }, fee, memo, _funds);
  };
  preMintNft = async ({
    mintNum
  }: {
    mintNum: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pre_mint_nft: {
        mint_num: mintNum
      }
    }, fee, memo, _funds);
  };
}