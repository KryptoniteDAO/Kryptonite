/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.33.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, RuleConfigMsg, ExecuteMsg, Binary, UpdateRuleConfigMsg, QueryMsg, QueryClaimableInfoResponse, QueryConfigResponse, QueryRuleInfoResponse, RuleConfig, RuleConfigState } from "./Distribute.types";
export interface DistributeReadOnlyInterface {
  contractAddress: string;
  queryClaimableInfo: ({
    ruleType
  }: {
    ruleType: string;
  }) => Promise<QueryClaimableInfoResponse>;
  queryRuleInfo: ({
    ruleType
  }: {
    ruleType: string;
  }) => Promise<QueryRuleInfoResponse>;
  queryConfig: () => Promise<QueryConfigResponse>;
}
export class DistributeQueryClient implements DistributeReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryClaimableInfo = this.queryClaimableInfo.bind(this);
    this.queryRuleInfo = this.queryRuleInfo.bind(this);
    this.queryConfig = this.queryConfig.bind(this);
  }

  queryClaimableInfo = async ({
    ruleType
  }: {
    ruleType: string;
  }): Promise<QueryClaimableInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_claimable_info: {
        rule_type: ruleType
      }
    });
  };
  queryRuleInfo = async ({
    ruleType
  }: {
    ruleType: string;
  }): Promise<QueryRuleInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_rule_info: {
        rule_type: ruleType
      }
    });
  };
  queryConfig = async (): Promise<QueryConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
}
export interface DistributeInterface {
  contractAddress: string;
  sender: string;
  claim: ({
    msg,
    ruleType
  }: {
    msg?: Binary;
    ruleType: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    distributeToken,
    gov
  }: {
    distributeToken?: Addr;
    gov?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateRuleConfig: ({
    updateRuleMsg
  }: {
    updateRuleMsg: UpdateRuleConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addRuleConfig: ({
    ruleMsg,
    ruleType
  }: {
    ruleMsg: RuleConfigMsg;
    ruleType: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DistributeClient implements DistributeInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claim = this.claim.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateRuleConfig = this.updateRuleConfig.bind(this);
    this.addRuleConfig = this.addRuleConfig.bind(this);
  }

  claim = async ({
    msg,
    ruleType
  }: {
    msg?: Binary;
    ruleType: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        msg,
        rule_type: ruleType
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    distributeToken,
    gov
  }: {
    distributeToken?: Addr;
    gov?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        distribute_token: distributeToken,
        gov
      }
    }, fee, memo, _funds);
  };
  updateRuleConfig = async ({
    updateRuleMsg
  }: {
    updateRuleMsg: UpdateRuleConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_rule_config: {
        update_rule_msg: updateRuleMsg
      }
    }, fee, memo, _funds);
  };
  addRuleConfig = async ({
    ruleMsg,
    ruleType
  }: {
    ruleMsg: RuleConfigMsg;
    ruleType: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_rule_config: {
        rule_msg: ruleMsg,
        rule_type: ruleType
      }
    }, fee, memo, _funds);
  };
}