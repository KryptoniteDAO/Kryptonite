/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type Logo = {
  url: string;
} | {
  embedded: EmbeddedLogo;
};
export type EmbeddedLogo = {
  svg: Binary;
} | {
  png: Binary;
};
export type Binary = string;
export type Addr = string;
export interface InstantiateMsg {
  cw20_init_msg: InstantiateMsg1;
  gov?: Addr | null;
  max_minted: number;
  max_supply: number;
}
export interface InstantiateMsg1 {
  decimals: number;
  initial_balances: Cw20Coin[];
  marketing?: InstantiateMarketingInfo | null;
  mint?: MinterResponse | null;
  name: string;
  symbol: string;
}
export interface Cw20Coin {
  address: string;
  amount: Uint128;
}
export interface InstantiateMarketingInfo {
  description?: string | null;
  logo?: Logo | null;
  marketing?: string | null;
  project?: string | null;
}
export interface MinterResponse {
  cap?: Uint128 | null;
  minter: string;
}
export type ExecuteMsg = {
  update_config: {
    fund?: Addr | null;
    max_minted?: Uint128 | null;
  };
} | {
  mint: {
    amount: Uint128;
    recipient: string;
  };
} | {
  burn: {
    amount: Uint128;
    user: string;
  };
} | {
  update_marketing: {
    description?: string | null;
    marketing?: string | null;
    project?: string | null;
  };
} | {
  upload_logo: Logo;
} | {
  set_gov: {
    gov: Addr;
  };
} | {
  accept_gov: {};
};
export type QueryMsg = {
  vote_config: {};
} | {
  checkpoints: {
    account: Addr;
    pos: number;
  };
} | {
  num_checkpoints: {
    account: Addr;
  };
} | {
  get_votes: {
    account: Addr;
  };
} | {
  get_past_votes: {
    account: Addr;
    block_number: number;
  };
} | {
  balance: {
    address: string;
  };
} | {
  token_info: {};
} | {
  minter: {};
} | {
  all_accounts: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  marketing_info: {};
} | {
  download_logo: {};
};
export interface AllAccountsResponse {
  accounts: string[];
  [k: string]: unknown;
}
export interface BalanceResponse {
  balance: Uint128;
}
export interface CheckpointResponse {
  from_block: number;
  votes: number;
}
export interface DownloadLogoResponse {
  data: Binary;
  mime_type: string;
}
export interface GetPastVotesResponse {
  votes: number;
}
export interface GetVotesResponse {
  votes: number;
}
export type LogoInfo = {
  url: string;
} | "embedded";
export interface MarketingInfoResponse {
  description?: string | null;
  logo?: LogoInfo | null;
  marketing?: Addr | null;
  project?: string | null;
  [k: string]: unknown;
}
export interface NumCheckpointsResponse {
  num: number;
}
export interface TokenInfoResponse {
  decimals: number;
  name: string;
  symbol: string;
  total_supply: Uint128;
}
export interface VoteConfigResponse {
  fund: Addr;
  gov: Addr;
  max_minted: Uint128;
  max_supply: number;
  new_gov?: Addr | null;
  total_minted: Uint128;
}
export type VeSeilorExecuteMsg = ExecuteMsg;