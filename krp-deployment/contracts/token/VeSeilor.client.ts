/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Logo, EmbeddedLogo, Binary, Addr, InstantiateMsg, InstantiateMsg1, Cw20Coin, InstantiateMarketingInfo, MinterResponse, ExecuteMsg, QueryMsg, AllAccountsResponse, BalanceResponse, CheckpointResponse, DownloadLogoResponse, GetPastVotesResponse, GetVotesResponse, IsMinterResponse, LogoInfo, MarketingInfoResponse, NumCheckpointsResponse, TokenInfoResponse, VoteConfigResponse } from "./VeSeilor.types";
export interface VeSeilorReadOnlyInterface {
  contractAddress: string;
  voteConfig: () => Promise<VoteConfigResponse>;
  isMinter: ({
    address
  }: {
    address: string;
  }) => Promise<IsMinterResponse>;
  checkpoints: ({
    account,
    pos
  }: {
    account: Addr;
    pos: number;
  }) => Promise<CheckpointResponse>;
  numCheckpoints: ({
    account
  }: {
    account: Addr;
  }) => Promise<NumCheckpointsResponse>;
  getVotes: ({
    account
  }: {
    account: Addr;
  }) => Promise<GetVotesResponse>;
  getPastVotes: ({
    account,
    blockNumber
  }: {
    account: Addr;
    blockNumber: number;
  }) => Promise<GetPastVotesResponse>;
  balance: ({
    address
  }: {
    address: string;
  }) => Promise<BalanceResponse>;
  tokenInfo: () => Promise<TokenInfoResponse>;
  minter: () => Promise<MinterResponse>;
  allAccounts: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<AllAccountsResponse>;
  marketingInfo: () => Promise<MarketingInfoResponse>;
  downloadLogo: () => Promise<DownloadLogoResponse>;
}
export class VeSeilorQueryClient implements VeSeilorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.voteConfig = this.voteConfig.bind(this);
    this.isMinter = this.isMinter.bind(this);
    this.checkpoints = this.checkpoints.bind(this);
    this.numCheckpoints = this.numCheckpoints.bind(this);
    this.getVotes = this.getVotes.bind(this);
    this.getPastVotes = this.getPastVotes.bind(this);
    this.balance = this.balance.bind(this);
    this.tokenInfo = this.tokenInfo.bind(this);
    this.minter = this.minter.bind(this);
    this.allAccounts = this.allAccounts.bind(this);
    this.marketingInfo = this.marketingInfo.bind(this);
    this.downloadLogo = this.downloadLogo.bind(this);
  }

  voteConfig = async (): Promise<VoteConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vote_config: {}
    });
  };
  isMinter = async ({
    address
  }: {
    address: string;
  }): Promise<IsMinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_minter: {
        address
      }
    });
  };
  checkpoints = async ({
    account,
    pos
  }: {
    account: Addr;
    pos: number;
  }): Promise<CheckpointResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      checkpoints: {
        account,
        pos
      }
    });
  };
  numCheckpoints = async ({
    account
  }: {
    account: Addr;
  }): Promise<NumCheckpointsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      num_checkpoints: {
        account
      }
    });
  };
  getVotes = async ({
    account
  }: {
    account: Addr;
  }): Promise<GetVotesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_votes: {
        account
      }
    });
  };
  getPastVotes = async ({
    account,
    blockNumber
  }: {
    account: Addr;
    blockNumber: number;
  }): Promise<GetPastVotesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_past_votes: {
        account,
        block_number: blockNumber
      }
    });
  };
  balance = async ({
    address
  }: {
    address: string;
  }): Promise<BalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {
        address
      }
    });
  };
  tokenInfo = async (): Promise<TokenInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_info: {}
    });
  };
  minter = async (): Promise<MinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minter: {}
    });
  };
  allAccounts = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<AllAccountsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_accounts: {
        limit,
        start_after: startAfter
      }
    });
  };
  marketingInfo = async (): Promise<MarketingInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      marketing_info: {}
    });
  };
  downloadLogo = async (): Promise<DownloadLogoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      download_logo: {}
    });
  };
}
export interface VeSeilorInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    fund,
    maxMinted
  }: {
    fund?: Addr;
    maxMinted?: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setMinters: ({
    contracts,
    isMinter
  }: {
    contracts: Addr[];
    isMinter: boolean[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mint: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    amount,
    user
  }: {
    amount: Uint128;
    user: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMarketing: ({
    description,
    marketing,
    project
  }: {
    description?: string;
    marketing?: string;
    project?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  uploadLogo: (logo: Logo, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setGov: ({
    gov
  }: {
    gov: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptGov: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class VeSeilorClient implements VeSeilorInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.setMinters = this.setMinters.bind(this);
    this.mint = this.mint.bind(this);
    this.burn = this.burn.bind(this);
    this.updateMarketing = this.updateMarketing.bind(this);
    this.uploadLogo = this.uploadLogo.bind(this);
    this.setGov = this.setGov.bind(this);
    this.acceptGov = this.acceptGov.bind(this);
  }

  updateConfig = async ({
    fund,
    maxMinted
  }: {
    fund?: Addr;
    maxMinted?: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        fund,
        max_minted: maxMinted
      }
    }, fee, memo, _funds);
  };
  setMinters = async ({
    contracts,
    isMinter
  }: {
    contracts: Addr[];
    isMinter: boolean[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_minters: {
        contracts,
        is_minter: isMinter
      }
    }, fee, memo, _funds);
  };
  mint = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        amount,
        recipient
      }
    }, fee, memo, _funds);
  };
  burn = async ({
    amount,
    user
  }: {
    amount: Uint128;
    user: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        amount,
        user
      }
    }, fee, memo, _funds);
  };
  updateMarketing = async ({
    description,
    marketing,
    project
  }: {
    description?: string;
    marketing?: string;
    project?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_marketing: {
        description,
        marketing,
        project
      }
    }, fee, memo, _funds);
  };
  uploadLogo = async (logo: Logo, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      upload_logo: logo
    }, fee, memo, _funds);
  };
  setGov = async ({
    gov
  }: {
    gov: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_gov: {
        gov
      }
    }, fee, memo, _funds);
  };
  acceptGov = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_gov: {}
    }, fee, memo, _funds);
  };
}