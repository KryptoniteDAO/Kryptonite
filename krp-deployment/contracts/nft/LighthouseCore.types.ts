/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface InstantiateMsg {
  denom: string;
  fee: Uint128;
  registeration_open: boolean;
}
export type ExecuteMsg = {
  update_config: {
    fee?: Uint128 | null;
    registeration_open?: boolean | null;
  };
} | {
  register_collection: {
    cw721_code: number;
    frozen: boolean;
    hidden_metadata: boolean;
    iterated_uri: boolean;
    mint_groups: MintGroup[];
    name: string;
    placeholder_token_uri?: string | null;
    royalty_percent: number;
    royalty_wallet: string;
    start_order?: number | null;
    supply: number;
    symbol: string;
    token_uri: string;
  };
} | {
  update_collection: {
    collection: string;
    iterated_uri: boolean;
    mint_groups: MintGroup[];
    name: string;
    royalty_percent: number;
    royalty_wallet: string;
    start_order?: number | null;
    supply: number;
    symbol: string;
    token_uri: string;
  };
} | {
  mint_native: {
    collection: string;
    group: string;
    hashed_address?: number[] | null;
    merkle_proof?: number[][] | null;
    recipient?: Addr | null;
  };
} | {
  unfreeze_collection: {
    collection: string;
  };
} | {
  reveal_collection_metadata: {
    collection: string;
  };
} | {
  update_reveal_collection_metadata: {
    collection: string;
    placeholder_token_uri: string;
  };
};
export type Addr = string;
export interface MintGroup {
  creators: Creator[];
  end_time: number;
  max_tokens: number;
  merkle_root?: number[] | null;
  name: string;
  start_time: number;
  unit_price: Uint128;
}
export interface Creator {
  address: string;
  share: number;
}
export type QueryMsg = {
  get_config: {};
} | {
  get_collection: {
    collection: string;
  };
} | {
  balance_of: {
    address: Addr;
    collection: string;
  };
} | {
  get_collections: {
    limit?: number | null;
    result_type?: string | null;
    start_after?: string | null;
  };
} | {
  get_minter_of: {
    collection: string;
    token_id: string;
  };
};
export interface MintInfo {
  mints: number[];
}
export interface Collection {
  admin: Addr;
  cw721_address?: Addr | null;
  frozen: boolean;
  hidden_metadata: boolean;
  iterated_uri: boolean;
  mint_groups: MintGroup[];
  name: string;
  next_token_id: number;
  placeholder_token_uri?: string | null;
  royalty_percent: number;
  royalty_wallet: string;
  start_order?: number | null;
  supply: number;
  symbol: string;
  token_uri: string;
}
export interface CollectionsResponseForCollection {
  collections: Collection[];
}
export interface Config {
  admin: Addr;
  denom: string;
  fee: Uint128;
  next_reply_id: number;
  registeration_open: boolean;
}
export type LighthouseCoreExecuteMsg = ExecuteMsg;