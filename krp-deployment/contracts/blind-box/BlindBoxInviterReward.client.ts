/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, MultiLevelRewardBoxMsg, UpdateInviterRewardConfigMsg, QueryMsg, CalCanClaimRewardTokenResponse, CalCanMintRewardBoxResponse, MapOfCalCanMintRewardBoxResponse, ConfigAndStateResponse, InviterRewardConfig, InviterRewardConfigState, InviterOptDetail } from "./BlindBoxInviterReward.types";
export interface BlindBoxInviterRewardReadOnlyInterface {
  contractAddress: string;
  queryAllConfigAndState: () => Promise<ConfigAndStateResponse>;
  calCanMintRewardBox: ({
    levelIndex,
    user
  }: {
    levelIndex: number;
    user: Addr;
  }) => Promise<CalCanMintRewardBoxResponse>;
  calMultiLevelRewardBox: ({
    levelIndexes,
    user
  }: {
    levelIndexes: number[];
    user: Addr;
  }) => Promise<MapOfCalCanMintRewardBoxResponse>;
  calCanClaimRewardToken: ({
    user
  }: {
    user: Addr;
  }) => Promise<CalCanClaimRewardTokenResponse>;
  queryInviterDetail: ({
    user
  }: {
    user: Addr;
  }) => Promise<InviterOptDetail>;
}
export class BlindBoxInviterRewardQueryClient implements BlindBoxInviterRewardReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryAllConfigAndState = this.queryAllConfigAndState.bind(this);
    this.calCanMintRewardBox = this.calCanMintRewardBox.bind(this);
    this.calMultiLevelRewardBox = this.calMultiLevelRewardBox.bind(this);
    this.calCanClaimRewardToken = this.calCanClaimRewardToken.bind(this);
    this.queryInviterDetail = this.queryInviterDetail.bind(this);
  }

  queryAllConfigAndState = async (): Promise<ConfigAndStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_all_config_and_state: {}
    });
  };
  calCanMintRewardBox = async ({
    levelIndex,
    user
  }: {
    levelIndex: number;
    user: Addr;
  }): Promise<CalCanMintRewardBoxResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cal_can_mint_reward_box: {
        level_index: levelIndex,
        user
      }
    });
  };
  calMultiLevelRewardBox = async ({
    levelIndexes,
    user
  }: {
    levelIndexes: number[];
    user: Addr;
  }): Promise<MapOfCalCanMintRewardBoxResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cal_multi_level_reward_box: {
        level_indexes: levelIndexes,
        user
      }
    });
  };
  calCanClaimRewardToken = async ({
    user
  }: {
    user: Addr;
  }): Promise<CalCanClaimRewardTokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cal_can_claim_reward_token: {
        user
      }
    });
  };
  queryInviterDetail = async ({
    user
  }: {
    user: Addr;
  }): Promise<InviterOptDetail> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_inviter_detail: {
        user
      }
    });
  };
}
export interface BlindBoxInviterRewardInterface {
  contractAddress: string;
  sender: string;
  mintMultilevelRewardBox: ({
    levelInfos
  }: {
    levelInfos: MultiLevelRewardBoxMsg[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintRewardBox: ({
    levelIndex,
    mintNum
  }: {
    levelIndex: number;
    mintNum: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewardToken: ({
    amount
  }: {
    amount?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    updateMsg
  }: {
    updateMsg: UpdateInviterRewardConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BlindBoxInviterRewardClient implements BlindBoxInviterRewardInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintMultilevelRewardBox = this.mintMultilevelRewardBox.bind(this);
    this.mintRewardBox = this.mintRewardBox.bind(this);
    this.claimRewardToken = this.claimRewardToken.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  mintMultilevelRewardBox = async ({
    levelInfos
  }: {
    levelInfos: MultiLevelRewardBoxMsg[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_multilevel_reward_box: {
        level_infos: levelInfos
      }
    }, fee, memo, _funds);
  };
  mintRewardBox = async ({
    levelIndex,
    mintNum
  }: {
    levelIndex: number;
    mintNum: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_reward_box: {
        level_index: levelIndex,
        mint_num: mintNum
      }
    }, fee, memo, _funds);
  };
  claimRewardToken = async ({
    amount
  }: {
    amount?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_reward_token: {
        amount
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    updateMsg
  }: {
    updateMsg: UpdateInviterRewardConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        update_msg: updateMsg
      }
    }, fee, memo, _funds);
  };
}