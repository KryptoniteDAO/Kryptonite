/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, BoxRewardConfig, OrdinaryBoxRewardLevelConfig, ExecuteMsg, Uint128, Binary, Cw20MintReceiveMsg, QueryMsg, AllConfigAndStateResponse, BoxRewardConfigState, OrdinaryBoxRewardLevelConfigState, RewardConfig, QueryBoxClaimableInfoResponse, BoxClaimableAmountInfoResponse, ArrayOfBoxOpenInfoResponse, BoxOpenInfoResponse } from "./BlindBoxReward.types";
export interface BlindBoxRewardReadOnlyInterface {
  contractAddress: string;
  queryAllConfigAndState: () => Promise<AllConfigAndStateResponse>;
  queryBoxOpenInfo: ({
    tokenIds
  }: {
    tokenIds: string[];
  }) => Promise<ArrayOfBoxOpenInfoResponse>;
  queryBoxClaimableInfos: ({
    tokenIds
  }: {
    tokenIds: string[];
  }) => Promise<QueryBoxClaimableInfoResponse>;
}
export class BlindBoxRewardQueryClient implements BlindBoxRewardReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryAllConfigAndState = this.queryAllConfigAndState.bind(this);
    this.queryBoxOpenInfo = this.queryBoxOpenInfo.bind(this);
    this.queryBoxClaimableInfos = this.queryBoxClaimableInfos.bind(this);
  }

  queryAllConfigAndState = async (): Promise<AllConfigAndStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_all_config_and_state: {}
    });
  };
  queryBoxOpenInfo = async ({
    tokenIds
  }: {
    tokenIds: string[];
  }): Promise<ArrayOfBoxOpenInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_box_open_info: {
        token_ids: tokenIds
      }
    });
  };
  queryBoxClaimableInfos = async ({
    tokenIds
  }: {
    tokenIds: string[];
  }): Promise<QueryBoxClaimableInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_box_claimable_infos: {
        token_ids: tokenIds
      }
    });
  };
}
export interface BlindBoxRewardInterface {
  contractAddress: string;
  sender: string;
  mintReceive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateRewardConfig: ({
    gov,
    nftContract
  }: {
    gov?: Addr;
    nftContract?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateBoxRewardConfig: ({
    boxOpenTime,
    boxRewardToken
  }: {
    boxOpenTime?: number;
    boxRewardToken?: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  openBlindBox: ({
    tokenIds
  }: {
    tokenIds: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  userClaimNftReward: ({
    tokenIds
  }: {
    tokenIds: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BlindBoxRewardClient implements BlindBoxRewardInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintReceive = this.mintReceive.bind(this);
    this.updateRewardConfig = this.updateRewardConfig.bind(this);
    this.updateBoxRewardConfig = this.updateBoxRewardConfig.bind(this);
    this.openBlindBox = this.openBlindBox.bind(this);
    this.userClaimNftReward = this.userClaimNftReward.bind(this);
  }

  mintReceive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateRewardConfig = async ({
    gov,
    nftContract
  }: {
    gov?: Addr;
    nftContract?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_reward_config: {
        gov,
        nft_contract: nftContract
      }
    }, fee, memo, _funds);
  };
  updateBoxRewardConfig = async ({
    boxOpenTime,
    boxRewardToken
  }: {
    boxOpenTime?: number;
    boxRewardToken?: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_box_reward_config: {
        box_open_time: boxOpenTime,
        box_reward_token: boxRewardToken
      }
    }, fee, memo, _funds);
  };
  openBlindBox = async ({
    tokenIds
  }: {
    tokenIds: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      open_blind_box: {
        token_ids: tokenIds
      }
    }, fee, memo, _funds);
  };
  userClaimNftReward = async ({
    tokenIds
  }: {
    tokenIds: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      user_claim_nft_reward: {
        token_ids: tokenIds
      }
    }, fee, memo, _funds);
  };
}