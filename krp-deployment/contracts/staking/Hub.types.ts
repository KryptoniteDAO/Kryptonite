/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export type Decimal = string;
export interface AllHistoryResponse {
  history: UnbondHistoryResponse[];
  [k: string]: unknown;
}
export interface UnbondHistoryResponse {
  amount: Uint128;
  applied_exchange_rate: Decimal;
  batch_id: number;
  bsei_amount: Uint128;
  bsei_applied_exchange_rate: Decimal;
  bsei_withdraw_rate: Decimal;
  released: boolean;
  stsei_amount: Uint128;
  stsei_applied_exchange_rate: Decimal;
  stsei_withdraw_rate: Decimal;
  time: number;
  withdraw_rate: Decimal;
  [k: string]: unknown;
}
export interface ConfigResponse {
  airdrop_registry_contract?: string | null;
  bsei_token_contract?: string | null;
  owner: string;
  reward_dispatcher_contract?: string | null;
  stsei_token_contract?: string | null;
  token_contract?: string | null;
  validators_registry_contract?: string | null;
  [k: string]: unknown;
}
export type CanonicalAddr = Binary;
export type Binary = string;
export interface Config {
  airdrop_registry_contract?: CanonicalAddr | null;
  bsei_token_contract?: CanonicalAddr | null;
  creator: CanonicalAddr;
  reward_dispatcher_contract?: CanonicalAddr | null;
  rewards_contract?: CanonicalAddr | null;
  stsei_token_contract?: CanonicalAddr | null;
  validators_registry_contract?: CanonicalAddr | null;
  [k: string]: unknown;
}
export interface CurrentBatchResponse {
  id: number;
  requested_bsei_with_fee: Uint128;
  requested_stsei: Uint128;
  requested_with_fee: Uint128;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  update_config: {
    airdrop_registry_contract?: string | null;
    bsei_token_contract?: string | null;
    owner?: string | null;
    rewards_contract?: string | null;
    rewards_dispatcher_contract?: string | null;
    stsei_token_contract?: string | null;
    validators_registry_contract?: string | null;
    [k: string]: unknown;
  };
} | {
  update_params: {
    epoch_period?: number | null;
    er_threshold?: Decimal | null;
    paused?: boolean | null;
    peg_recovery_fee?: Decimal | null;
    unbonding_period?: number | null;
    [k: string]: unknown;
  };
} | {
  bond: {
    [k: string]: unknown;
  };
} | {
  bond_for_st_sei: {
    [k: string]: unknown;
  };
} | {
  bond_rewards: {
    [k: string]: unknown;
  };
} | {
  update_global_index: {
    airdrop_hooks?: Binary[] | null;
    [k: string]: unknown;
  };
} | {
  withdraw_unbonded: {
    [k: string]: unknown;
  };
} | {
  check_slashing: {
    [k: string]: unknown;
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  claim_airdrop: {
    airdrop_contract: string;
    airdrop_swap_contract: string;
    airdrop_token_contract: string;
    claim_msg: Binary;
    swap_msg: Binary;
    [k: string]: unknown;
  };
} | {
  swap_hook: {
    airdrop_swap_contract: string;
    airdrop_token_contract: string;
    swap_msg: Binary;
    [k: string]: unknown;
  };
} | {
  redelegate_proxy: {
    redelegations: [string, Coin][];
    src_validator: string;
    [k: string]: unknown;
  };
} | {
  migrate_unbond_wait_list: {
    limit?: number | null;
    [k: string]: unknown;
  };
};
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  epoch_period: number;
  er_threshold: Decimal;
  peg_recovery_fee: Decimal;
  reward_denom: string;
  unbonding_period: number;
  underlying_coin_denom: string;
  [k: string]: unknown;
}
export interface MigrateMsg {
  reward_dispatcher_contract: string;
  rewards_contract: string;
  stsei_token_contract: string;
  validators_registry_contract: string;
  [k: string]: unknown;
}
export interface Parameters {
  epoch_period: number;
  er_threshold: Decimal;
  paused?: boolean | null;
  peg_recovery_fee: Decimal;
  reward_denom: string;
  unbonding_period: number;
  underlying_coin_denom: string;
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {
    [k: string]: unknown;
  };
} | {
  state: {
    [k: string]: unknown;
  };
} | {
  current_batch: {
    [k: string]: unknown;
  };
} | {
  withdrawable_unbonded: {
    address: string;
    [k: string]: unknown;
  };
} | {
  parameters: {
    [k: string]: unknown;
  };
} | {
  unbond_requests: {
    address: string;
    [k: string]: unknown;
  };
} | {
  all_history: {
    limit?: number | null;
    start_from?: number | null;
    [k: string]: unknown;
  };
};
export interface StateResponse {
  bsei_exchange_rate: Decimal;
  exchange_rate: Decimal;
  last_index_modification: number;
  last_processed_batch: number;
  last_unbonded_time: number;
  prev_hub_balance: Uint128;
  stsei_exchange_rate: Decimal;
  total_bond_amount: Uint128;
  total_bond_bsei_amount: Uint128;
  total_bond_stsei_amount: Uint128;
  [k: string]: unknown;
}
export interface State {
  bsei_exchange_rate: Decimal;
  last_index_modification: number;
  last_processed_batch: number;
  last_unbonded_time: number;
  prev_hub_balance: Uint128;
  stsei_exchange_rate: Decimal;
  total_bond_bsei_amount: Uint128;
  total_bond_stsei_amount: Uint128;
  [k: string]: unknown;
}
export interface UnbondRequestsResponse {
  address: string;
  requests: [number, Uint128, Uint128][];
  [k: string]: unknown;
}
export interface WithdrawableUnbondedResponse {
  withdrawable: Uint128;
  [k: string]: unknown;
}
export type HubExecuteMsg = ExecuteMsg;