/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Identifier, QueryMsg, PriceFeedResponse, PriceFeed, Price } from "./MockOracle.types";
export interface MockOracleReadOnlyInterface {
  contractAddress: string;
  priceFeed: ({
    id
  }: {
    id: Identifier;
  }) => Promise<PriceFeedResponse>;
}
export class MockOracleQueryClient implements MockOracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.priceFeed = this.priceFeed.bind(this);
  }

  priceFeed = async ({
    id
  }: {
    id: Identifier;
  }): Promise<PriceFeedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      price_feed: {
        id
      }
    });
  };
}
export interface MockOracleInterface {
  contractAddress: string;
  sender: string;
  updatePriceFeed: ({
    id,
    price
  }: {
    id: Identifier;
    price: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MockOracleClient implements MockOracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updatePriceFeed = this.updatePriceFeed.bind(this);
  }

  updatePriceFeed = async ({
    id,
    price
  }: {
    id: Identifier;
    price: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price_feed: {
        id,
        price
      }
    }, fee, memo, _funds);
  };
}