/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export interface InstantiateMsg {
  dragons_contract?: Addr | null;
  end_time: number;
  extension?: Metadata | null;
  gov?: Addr | null;
  mod_num: number;
  name: string;
  payment_token: Addr;
  price_uint: Uint128;
  random_configs: RandomConfig[];
  random_contract: Addr;
  start_time: number;
  symbol: string;
  token_uri: string;
}
export interface Metadata {
  animation_url?: string | null;
  attributes?: Trait[] | null;
  background_color?: string | null;
  description?: string | null;
  external_url?: string | null;
  image?: string | null;
  image_data?: string | null;
  name?: string | null;
  youtube_url?: string | null;
}
export interface Trait {
  display_type?: string | null;
  trait_type: string;
  value: string;
}
export interface RandomConfig {
  body_part: number;
  end_index: number;
  start_index: number;
}
export type ExecuteMsg = {
  burn: {
    token_id: string;
  };
} | {
  update_config: {
    config: UpdateConfigMsg;
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  set_gov: {
    gov: Addr;
  };
} | {
  accept_gov: {};
};
export type Binary = string;
export interface UpdateConfigMsg {
  dragons_contract?: Addr | null;
  end_time?: number | null;
  mod_num?: number | null;
  random_configs?: RandomConfig[] | null;
  random_contract?: Addr | null;
  start_time?: number | null;
}
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export type QueryMsg = {
  owner_of: {
    include_expired?: boolean | null;
    token_id: string;
  };
} | {
  approval: {
    include_expired?: boolean | null;
    spender: string;
    token_id: string;
  };
} | {
  approvals: {
    include_expired?: boolean | null;
    token_id: string;
  };
} | {
  operator: {
    include_expired?: boolean | null;
    operator: string;
    owner: string;
  };
} | {
  all_operators: {
    include_expired?: boolean | null;
    limit?: number | null;
    owner: string;
    start_after?: string | null;
  };
} | {
  num_tokens: {};
} | {
  contract_info: {};
} | {
  nft_info: {
    token_id: string;
  };
} | {
  all_nft_info: {
    include_expired?: boolean | null;
    token_id: string;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
  };
} | {
  all_tokens: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  minter: {};
} | {
  extension: {
    msg: Empty;
  };
} | {
  query_config: {};
};
export interface Empty {
  [k: string]: unknown;
}
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export interface AllNftInfoResponseForEmpty {
  access: OwnerOfResponse;
  info: NftInfoResponseForEmpty;
}
export interface OwnerOfResponse {
  approvals: Approval[];
  owner: string;
}
export interface Approval {
  expires: Expiration;
  spender: string;
}
export interface NftInfoResponseForEmpty {
  extension: Empty;
  token_uri?: string | null;
}
export interface OperatorsResponse {
  operators: Approval[];
}
export interface TokensResponse {
  tokens: string[];
}
export interface ApprovalResponse {
  approval: Approval;
}
export interface ApprovalsResponse {
  approvals: Approval[];
}
export interface ContractInfoResponse {
  name: string;
  symbol: string;
}
export type Null = null;
export interface MinterResponse {
  minter?: string | null;
}
export interface NumTokensResponse {
  count: number;
}
export interface OperatorResponse {
  approval: Approval;
}
export interface Config {
  dragons_contract: Addr;
  end_time: number;
  gov: Addr;
  mod_num: number;
  new_gov?: Addr | null;
  payment_token: Addr;
  price_uint: Uint128;
  random_configs: RandomConfig[];
  random_contract: Addr;
  start_time: number;
  token_uri: string;
  unused_token_id: number;
}
export type DragonPartExecuteMsg = ExecuteMsg;