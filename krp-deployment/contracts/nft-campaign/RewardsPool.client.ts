/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, UpdateConfigMsg, RegisterPeriodPoolMsg, OpenRewardMsg, QueryMsg, OwnershipForAddr, Config, PeriodPoolConfig, Decimal, PoolRewardsInfo, Boolean } from "./RewardsPool.types";
export interface RewardsPoolReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryPeriodPoolConfig: ({
    periodId
  }: {
    periodId: number;
  }) => Promise<PeriodPoolConfig>;
  queryPeriodIdByDragon: ({
    dragonContract
  }: {
    dragonContract: Addr;
  }) => Promise<Uint64>;
  queryPoolRewardsInfo: () => Promise<PoolRewardsInfo>;
  queryUserClaimed: ({
    periodId,
    user
  }: {
    periodId: number;
    user: Addr;
  }) => Promise<Boolean>;
  getOwnership: () => Promise<OwnershipForAddr>;
}
export class RewardsPoolQueryClient implements RewardsPoolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryPeriodPoolConfig = this.queryPeriodPoolConfig.bind(this);
    this.queryPeriodIdByDragon = this.queryPeriodIdByDragon.bind(this);
    this.queryPoolRewardsInfo = this.queryPoolRewardsInfo.bind(this);
    this.queryUserClaimed = this.queryUserClaimed.bind(this);
    this.getOwnership = this.getOwnership.bind(this);
  }

  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryPeriodPoolConfig = async ({
    periodId
  }: {
    periodId: number;
  }): Promise<PeriodPoolConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_period_pool_config: {
        period_id: periodId
      }
    });
  };
  queryPeriodIdByDragon = async ({
    dragonContract
  }: {
    dragonContract: Addr;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_period_id_by_dragon: {
        dragon_contract: dragonContract
      }
    });
  };
  queryPoolRewardsInfo = async (): Promise<PoolRewardsInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_pool_rewards_info: {}
    });
  };
  queryUserClaimed = async ({
    periodId,
    user
  }: {
    periodId: number;
    user: Addr;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_user_claimed: {
        period_id: periodId,
        user
      }
    });
  };
  getOwnership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_ownership: {}
    });
  };
}
export interface RewardsPoolInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    updateConfigMsg
  }: {
    updateConfigMsg: UpdateConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerPeriodPool: ({
    registerPeriodPoolMsg
  }: {
    registerPeriodPoolMsg: RegisterPeriodPoolMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  openReward: ({
    openRewardMsg
  }: {
    openRewardMsg: OpenRewardMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  bondForRewardToken: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimReward: ({
    amount,
    proof
  }: {
    amount: Uint128;
    proof: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RewardsPoolClient implements RewardsPoolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.registerPeriodPool = this.registerPeriodPool.bind(this);
    this.openReward = this.openReward.bind(this);
    this.bondForRewardToken = this.bondForRewardToken.bind(this);
    this.claimReward = this.claimReward.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  updateConfig = async ({
    updateConfigMsg
  }: {
    updateConfigMsg: UpdateConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        update_config_msg: updateConfigMsg
      }
    }, fee, memo, _funds);
  };
  registerPeriodPool = async ({
    registerPeriodPoolMsg
  }: {
    registerPeriodPoolMsg: RegisterPeriodPoolMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_period_pool: {
        register_period_pool_msg: registerPeriodPoolMsg
      }
    }, fee, memo, _funds);
  };
  openReward = async ({
    openRewardMsg
  }: {
    openRewardMsg: OpenRewardMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      open_reward: {
        open_reward_msg: openRewardMsg
      }
    }, fee, memo, _funds);
  };
  bondForRewardToken = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      bond_for_reward_token: {}
    }, fee, memo, _funds);
  };
  claimReward = async ({
    amount,
    proof
  }: {
    amount: Uint128;
    proof: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_reward: {
        amount,
        proof
      }
    }, fee, memo, _funds);
  };
  updateOwnership = async (action: Action, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee, memo, _funds);
  };
}