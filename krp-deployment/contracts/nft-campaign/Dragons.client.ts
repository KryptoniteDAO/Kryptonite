/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, Action, Expiration, Timestamp, Uint64, RegisterDragonMsg, Metadata, Trait, UpdateDragonConfigMsg, QueryMsg, OwnershipForAddr, Config, DragonConfig, ArrayOfDragonConfig } from "./Dragons.types";
export interface DragonsReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryDragonConfig: ({
    cw721Address
  }: {
    cw721Address: Addr;
  }) => Promise<DragonConfig>;
  queryDragonConfigs: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: Addr;
  }) => Promise<ArrayOfDragonConfig>;
  getOwnership: () => Promise<OwnershipForAddr>;
}
export class DragonsQueryClient implements DragonsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryDragonConfig = this.queryDragonConfig.bind(this);
    this.queryDragonConfigs = this.queryDragonConfigs.bind(this);
    this.getOwnership = this.getOwnership.bind(this);
  }

  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryDragonConfig = async ({
    cw721Address
  }: {
    cw721Address: Addr;
  }): Promise<DragonConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_dragon_config: {
        cw721_address: cw721Address
      }
    });
  };
  queryDragonConfigs = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: Addr;
  }): Promise<ArrayOfDragonConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_dragon_configs: {
        limit,
        start_after: startAfter
      }
    });
  };
  getOwnership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_ownership: {}
    });
  };
}
export interface DragonsInterface {
  contractAddress: string;
  sender: string;
  registerDragon: ({
    registerDragonMsg
  }: {
    registerDragonMsg: RegisterDragonMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mint: ({
    dragonAddress,
    tokenIds
  }: {
    dragonAddress: Addr;
    tokenIds: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateDragonConfig: ({
    updateDragonConfigMsg
  }: {
    updateDragonConfigMsg: UpdateDragonConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DragonsClient implements DragonsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerDragon = this.registerDragon.bind(this);
    this.mint = this.mint.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
    this.updateDragonConfig = this.updateDragonConfig.bind(this);
  }

  registerDragon = async ({
    registerDragonMsg
  }: {
    registerDragonMsg: RegisterDragonMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_dragon: {
        register_dragon_msg: registerDragonMsg
      }
    }, fee, memo, _funds);
  };
  mint = async ({
    dragonAddress,
    tokenIds
  }: {
    dragonAddress: Addr;
    tokenIds: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        dragon_address: dragonAddress,
        token_ids: tokenIds
      }
    }, fee, memo, _funds);
  };
  updateOwnership = async (action: Action, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee, memo, _funds);
  };
  updateDragonConfig = async ({
    updateDragonConfigMsg
  }: {
    updateDragonConfigMsg: UpdateDragonConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_dragon_config: {
        update_dragon_config_msg: updateDragonConfigMsg
      }
    }, fee, memo, _funds);
  };
}