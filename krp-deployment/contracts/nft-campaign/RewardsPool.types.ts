/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export interface InstantiateMsg {
  convert_contract_hub: Addr;
  convert_controller: Addr;
  convert_denom: string;
  medal_contract?: Addr | null;
  next_reward_pool_percent: Uint128;
  owner?: Addr | null;
  platform_address: Addr;
  reward_pool_percent: Uint128;
  reward_pool_platform_percent: Uint128;
  reward_token: Addr;
  seiman_contract?: Addr | null;
}
export type ExecuteMsg = {
  update_config: {
    update_config_msg: UpdateConfigMsg;
  };
} | {
  register_period_pool: {
    register_period_pool_msg: RegisterPeriodPoolMsg;
  };
} | {
  open_reward: {
    open_reward_msg: OpenRewardMsg;
  };
} | {
  bond_for_reward_token: {};
} | {
  claim_reward: {
    amount: Uint128;
    proof: string;
  };
} | {
  update_ownership: Action;
};
export type Action = {
  transfer_ownership: {
    expiry?: Expiration | null;
    new_owner: string;
  };
} | "accept_ownership" | "renounce_ownership";
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = number;
export interface UpdateConfigMsg {
  convert_controller?: Addr | null;
  medal_contract?: Addr | null;
  next_period_start_time?: number | null;
  platform_address?: Addr | null;
  seiman_contract?: Addr | null;
}
export interface RegisterPeriodPoolMsg {
  dragon_contract: Addr;
  end_time: number;
  next_period_start_time: number;
  start_time: number;
}
export interface OpenRewardMsg {
  reward_merkle_root: string;
  reward_period_id: number;
}
export type QueryMsg = {
  query_config: {};
} | {
  query_period_pool_config: {
    period_id: number;
  };
} | {
  query_period_id_by_dragon: {
    dragon_contract: Addr;
  };
} | {
  query_pool_rewards_info: {};
} | {
  query_user_claimed: {
    period_id: number;
    user: Addr;
  };
};
export interface Config {
  convert_contract_hub: Addr;
  convert_controller: Addr;
  convert_denom: string;
  convert_total_amount: Uint128;
  convert_total_reward_amount: Uint128;
  current_period_end_time: number;
  current_period_id: number;
  current_period_start_time: number;
  medal_contract: Addr;
  next_period_start_time: number;
  next_reward_pool_percent: Uint128;
  platform_address: Addr;
  reward_period_id: number;
  reward_pool_percent: Uint128;
  reward_pool_platform_percent: Uint128;
  reward_token: Addr;
  seiman_contract: Addr;
}
export interface PeriodPoolConfig {
  claim_closed: boolean;
  dragon_contract: Addr;
  end_time: number;
  next_pool_amount: Uint128;
  period_id: number;
  reward_merkle_root: string;
  reward_opened: boolean;
  start_time: number;
  total_amount: Uint128;
  total_claimed_amount: Uint128;
  total_platform_amount: Uint128;
  total_reward_amount: Uint128;
}
export type Decimal = string;
export interface PoolRewardsInfo {
  convert_denom_amount: Uint128;
  hub_rate: Decimal;
  reward_token_amount: Uint128;
  total_amount: Uint128;
}
export type Boolean = boolean;
export type RewardsPoolExecuteMsg = ExecuteMsg;