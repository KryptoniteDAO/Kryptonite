/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, InstantiateMsg, ExecuteMsg, QueryMsg, Uint64, Config } from "./Random.types";
export interface RandomReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  getRandomNumber: ({
    seed
  }: {
    seed?: string;
  }) => Promise<Uint64>;
}
export class RandomQueryClient implements RandomReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.getRandomNumber = this.getRandomNumber.bind(this);
  }

  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  getRandomNumber = async ({
    seed
  }: {
    seed?: string;
  }): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_random_number: {
        seed
      }
    });
  };
}
export interface RandomInterface {
  contractAddress: string;
  sender: string;
  setPair: ({
    addOrRemove,
    pair
  }: {
    addOrRemove: boolean;
    pair: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RandomClient implements RandomInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setPair = this.setPair.bind(this);
  }

  setPair = async ({
    addOrRemove,
    pair
  }: {
    addOrRemove: boolean;
    pair: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_pair: {
        add_or_remove: addOrRemove,
        pair
      }
    }, fee, memo, _funds);
  };
}